% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apply_styles.R
\name{apply_styles}
\alias{apply_styles}
\title{Apply Extracted Excel Styles to Workbook Data}
\usage{
apply_styles(wb, all_info, df, cells, formats)
}
\arguments{
\item{wb}{An Excel workbook object (from \code{openxlsx::loadWorkbook()}) to which data has already been written.}

\item{all_info}{Tibble containing structured metadata generated by \code{summarize_metadata()}, specifying precisely where data and styles should be applied.}

\item{df}{Data frame containing data written into the workbook, used for determining styling ranges.}

\item{cells}{Data frame returned by \code{tidyxl::xlsx_cells()} containing detailed cell information, including style identifiers (\code{local_format_id}) from the template Excel file.}

\item{formats}{List object returned by \code{tidyxl::xlsx_formats()} containing detailed definitions of Excel styles extracted from the original template file.}
}
\value{
The Excel workbook object (\code{wb}) with Excel cell styles applied as defined by the original template.
}
\description{
Applies Excel cell formatting styles—extracted from an original template workbook—to newly populated data in a workbook. This function ensures that data written using \code{write_data()} is formatted consistently according to the original Excel template's styles.
}
\details{
This function:

\enumerate{
  \item Extracts cell-formatting definitions (fonts, fills, alignment, number formats, etc.) from the original template workbook (using data from \code{cells} and \code{formats} provided by \code{tidyxl}).

  \item Converts these Excel style definitions into R-compatible styles using \code{openxlsx::createStyle()}.

  \item Matches these extracted styles with corresponding cell positions defined in the metadata (\code{all_info}), carefully handling two distinct cases:
    \itemize{
      \item Single-cell styles (variables).
      \item Column-based styles (tables spanning multiple rows).
    }

  \item Applies styles to the newly written data cells using \code{openxlsx::addStyle()}, stacking styles appropriately to prevent loss of previously applied formatting.
}

The function is careful to handle missing or default formatting values, converting Excel style definitions accurately and robustly into R-compatible equivalents.
}
\examples{
\dontrun{
library(tidyxl)
library(openxlsx)

wb <- openxlsx::loadWorkbook("template.xlsx")
metadata <- summarize_metadata("template.xlsx")
df <- tibble::tibble(name = c("A", "B"), value = c(10, 20))

wb <- write_data(wb, df, metadata$all_info[[1]])

# Extract cell and format information from the template
cells <- tidyxl::xlsx_cells("template.xlsx")
formats <- tidyxl::xlsx_formats("template.xlsx")

# Apply extracted styles
wb <- apply_styles(wb, metadata$all_info[[1]], df, cells, formats)

openxlsx::saveWorkbook(wb, "styled_populated_template.xlsx", overwrite = TRUE)
}

}
